{"version":3,"file":"index.js","sources":["../src/ErrorBoundary.tsx","../src/index.tsx"],"sourcesContent":["import React from 'react';\n\nclass ErrorBoundary extends React.Component<\n  { children: any },\n  { hasError: boolean }\n> {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.log(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\nimport barcodes from 'jsbarcode/src/barcodes';\nimport Svg, { Path } from 'react-native-svg';\n\nimport ErrorBoundary from './ErrorBoundary';\n\ntype props = {\n  value: string;\n  format: string;\n  width: number;\n  height: number;\n  text?: string;\n  textColor: string;\n  lineColor: string;\n  background: string;\n  onError?: (error: Error) => any;\n};\n\nconst Barcode = ({\n  value,\n  format = 'CODE128',\n  width = 2,\n  height = 100,\n  text,\n  textColor = '#000000',\n  lineColor = '#000000',\n  background = '#ffffff',\n  onError,\n}: props) => {\n  const [bars, setBars] = useState([]);\n  const [barCodeWidth, setBarCodeWidth] = useState(0);\n\n  const props = {\n    value,\n    format,\n    width,\n    height,\n    text,\n    textColor,\n    lineColor,\n    background,\n    onError,\n  };\n\n  useEffect(() => {\n    update();\n  }, [value]);\n\n  const update = () => {\n    const encoder = barcodes[format];\n    const encoded = encode(value, encoder, props);\n\n    if (encoded) {\n      setBars(drawSvgBarCode(encoded, props));\n      setBarCodeWidth(encoded.data.length * width);\n    }\n  };\n\n  const drawSvgBarCode = (encoding, options: props) => {\n    const rects = [];\n    // binary data of barcode\n    const binary = encoding.data;\n\n    let barWidth = 0;\n    let x = 0;\n    let yFrom = 0;\n\n    for (let b = 0; b < binary.length; b++) {\n      x = b * options.width;\n      if (binary[b] === '1') {\n        barWidth++;\n      } else if (barWidth > 0) {\n        rects[rects.length] = drawRect(\n          x - options.width * barWidth,\n          yFrom,\n          options.width * barWidth,\n          options.height,\n        );\n        barWidth = 0;\n      }\n    }\n\n    // Last draw is needed since the barcode ends with 1\n    if (barWidth > 0) {\n      rects[rects.length] = drawRect(\n        x - options.width * (barWidth - 1),\n        yFrom,\n        options.width * barWidth,\n        options.height,\n      );\n    }\n\n    return rects;\n  };\n\n  const drawRect = (x, y, width, height) => {\n    return `M${x},${y}h${width}v${height}h-${width}z`;\n  };\n\n  // encode() handles the Encoder call and builds the binary string to be rendered\n  const encode = (text: string, Encoder: any, options: props) => {\n    // If text is not a non-empty string, throw error.\n    if (typeof text !== 'string' || text.length === 0) {\n      if (options.onError) {\n        options.onError(new Error('Barcode value must be a non-empty string'));\n        return;\n      }\n      throw new Error('Barcode value must be a non-empty string');\n    }\n\n    let encoder;\n\n    try {\n      encoder = new Encoder(text, options);\n    } catch (error) {\n      // If the encoder could not be instantiated, throw error.\n      if (options.onError) {\n        options.onError(new Error('Invalid barcode format.'));\n        return;\n      }\n      throw new Error('Invalid barcode format.');\n    }\n\n    // If the input is not valid for the encoder, throw error.\n    if (!encoder.valid()) {\n      if (options.onError) {\n        options.onError(new Error('Invalid barcode for selected format.'));\n        return;\n      }\n      throw new Error('Invalid barcode for selected format.');\n    }\n\n    // Make a request for the binary data (and other infromation) that should be rendered\n    // encoded stucture is {\n    //  text: 'xxxxx',\n    //  data: '110100100001....'\n    // }\n    const encoded = encoder.encode();\n    return encoded;\n  };\n\n  const backgroundStyle = {\n    backgroundColor: background,\n  };\n  return (\n    <ErrorBoundary>\n      <View style={[styles.svgContainer, backgroundStyle]}>\n        <Svg height={height} width={barCodeWidth} fill={lineColor}>\n          <Path d={bars.join(' ')} />\n        </Svg>\n        {typeof text !== 'undefined' && (\n          <Text\n            style={{\n              color: textColor,\n              width: barCodeWidth,\n              textAlign: 'center',\n            }}\n          >\n            {text}\n          </Text>\n        )}\n      </View>\n    </ErrorBoundary>\n  );\n};\n\nconst styles = StyleSheet.create({\n  svgContainer: {\n    alignItems: 'center',\n    padding: 10,\n  },\n});\n\nexport default Barcode;\n"],"names":["ErrorBoundary","constructor","props","super","state","hasError","getDerivedStateFromError","error","componentDidCatch","errorInfo","console","log","render","React","children","Component","const","Barcode","text","onError","useState","bars","setBars","barCodeWidth","setBarCodeWidth","value","format","width","height","textColor","lineColor","background","useEffect","update","encoder","barcodes","encoded","encode","drawSvgBarCode","data","length","encoding","options","rects","binary","let","barWidth","x","yFrom","b","drawRect","y","Encoder","Error","valid","backgroundStyle","backgroundColor","View","styles","svgContainer","Svg","Path","join","Text","color","textAlign","StyleSheet","create","alignItems","padding"],"mappings":";;;;;;;;;AAEA,IAAMA,aAAN;EAIEC,uBAAYC;IACVC,sBAAMD,KAAN;IACA,KAAKE,KAAL,GAAa;MAAEC,QAAQ,EAAE;KAAzB;;;;;;;EAG6B,cAAxBC,8DAAyBC,KAAD;IAC7B,OAAO;MAAEF,QAAQ,EAAE;KAAnB;;;0BAGFG,gDAAkBD,KAAD,EAAaE,SAAb;IACfC,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmBE,SAAnB;;;0BAGFG;IACE,IAAI,KAAKR,KAAL,CAAWC,QAAf,EAAyB;;MAEvB,OAAOQ,0CAAI,uBAAqB,EAAhC;;;IAGF,OAAO,KAAKX,KAAL,CAAWY,QAAlB;;;;EAvBwBD,cAAK,CAACE;;ACiBlCC,IAAMC,OAAO,gBAAG;;6DAEL;yDACD;6DACC,IACTC;;yEACY;yEACA;6EACC,UACbC;;;cAEwBC,cAAQ,CAAC,EAAD;EAAzBC;EAAMC;cAC2BF,cAAQ,CAAC,CAAD;EAAzCG;EAAcC;EAErBR,IAAMd,KAAK,GAAG;WACZuB,KADY;YAEZC,MAFY;WAGZC,KAHY;YAIZC,MAJY;UAKZV,IALY;eAMZW,SANY;eAOZC,SAPY;gBAQZC,UARY;aASZZ;GATF;EAYAa,eAAS;IACPC,MAAM;GADC,EAEN,CAACR,KAAD,CAFM,CAAT;;EAIAT,IAAMiB,MAAM;IACVjB,IAAMkB,OAAO,GAAGC,QAAQ,CAACT,MAAD,CAAxB;IACAV,IAAMoB,OAAO,GAAGC,MAAM,CAACZ,KAAD,EAAQS,OAAR,EAAiBhC,KAAjB,CAAtB;;IAEA,IAAIkC,OAAJ,EAAa;MACXd,OAAO,CAACgB,cAAc,CAACF,OAAD,EAAUlC,KAAV,CAAf,CAAP;MACAsB,eAAe,CAACY,OAAO,CAACG,IAAR,CAAaC,MAAb,GAAsBb,KAAvB,CAAf;;GANJ;;EAUAX,IAAMsB,cAAc,aAAIG,QAAD,EAAWC,OAAX;IACrB1B,IAAM2B,KAAK,GAAG,EAAd;;IAEA3B,IAAM4B,MAAM,GAAGH,QAAQ,CAACF,IAAxB;IAEAM,IAAIC,QAAQ,GAAG,CAAf;IACAD,IAAIE,CAAC,GAAG,CAAR;IACAF,IAAIG,KAAK,GAAG,CAAZ;;IAEA,KAAKH,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACJ,MAA3B,EAAmCS,CAAC,EAApC,EAAwC;MACtCF,CAAC,GAAGE,CAAC,GAAGP,OAAO,CAACf,KAAhB;;MACA,IAAIiB,MAAM,CAACK,CAAD,CAAN,KAAc,GAAlB,EAAuB;QACrBH,QAAQ;OADV,MAEO,IAAIA,QAAQ,GAAG,CAAf,EAAkB;QACvBH,KAAK,CAACA,KAAK,CAACH,MAAP,CAAL,GAAsBU,QAAQ,CAC5BH,CAAC,GAAGL,OAAO,CAACf,KAAR,GAAgBmB,QADQ,EAE5BE,KAF4B,EAG5BN,OAAO,CAACf,KAAR,GAAgBmB,QAHY,EAI5BJ,OAAO,CAACd,MAJoB,CAA9B;QAMAkB,QAAQ,GAAG,CAAX;;;;;IAKJ,IAAIA,QAAQ,GAAG,CAAf,EAAkB;MAChBH,KAAK,CAACA,KAAK,CAACH,MAAP,CAAL,GAAsBU,QAAQ,CAC5BH,CAAC,GAAGL,OAAO,CAACf,KAAR,IAAiBmB,QAAQ,GAAG,CAA5B,CADwB,EAE5BE,KAF4B,EAG5BN,OAAO,CAACf,KAAR,GAAgBmB,QAHY,EAI5BJ,OAAO,CAACd,MAJoB,CAA9B;;;IAQF,OAAOe,KAAP;GAlCF;;EAqCA3B,IAAMkC,QAAQ,aAAIH,CAAD,EAAII,CAAJ,EAAOxB,KAAP,EAAcC,MAAd;IACf,cAAWmB,UAAKI,UAAKxB,cAASC,gBAAWD;GAD3C;;;EAKAX,IAAMqB,MAAM,aAAInB,IAAD,EAAekC,OAAf,EAA6BV,OAA7B;;IAEb,IAAI,OAAOxB,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACsB,MAAL,KAAgB,CAAhD,EAAmD;MACjD,IAAIE,OAAO,CAACvB,OAAZ,EAAqB;QACnBuB,OAAO,CAACvB,OAAR,CAAgB,IAAIkC,KAAJ,CAAU,0CAAV,CAAhB;QACA;;;MAEF,MAAM,IAAIA,KAAJ,CAAU,0CAAV,CAAN;;;IAGFR,IAAIX,OAAJ;;IAEA,IAAI;MACFA,OAAO,GAAG,IAAIkB,OAAJ,CAAYlC,IAAZ,EAAkBwB,OAAlB,CAAV;KADF,CAEE,OAAOnC,KAAP,EAAc;;MAEd,IAAImC,OAAO,CAACvB,OAAZ,EAAqB;QACnBuB,OAAO,CAACvB,OAAR,CAAgB,IAAIkC,KAAJ,CAAU,yBAAV,CAAhB;QACA;;;MAEF,MAAM,IAAIA,KAAJ,CAAU,yBAAV,CAAN;;;;IAIF,IAAI,CAACnB,OAAO,CAACoB,KAAR,EAAL,EAAsB;MACpB,IAAIZ,OAAO,CAACvB,OAAZ,EAAqB;QACnBuB,OAAO,CAACvB,OAAR,CAAgB,IAAIkC,KAAJ,CAAU,sCAAV,CAAhB;QACA;;;MAEF,MAAM,IAAIA,KAAJ,CAAU,sCAAV,CAAN;;;;;;;;IAQFrC,IAAMoB,OAAO,GAAGF,OAAO,CAACG,MAAR,EAAhB;IACA,OAAOD,OAAP;GAtCF;;EAyCApB,IAAMuC,eAAe,GAAG;IACtBC,eAAe,EAAEzB;GADnB;EAGA,OACElB,8BAAC;MACCA,8BAAC4C,oBAAK,OAAO,CAACC,MAAM,CAACC,YAAR,EAAsBJ,eAAtB;QACX1C,8BAAC+C,gBAAI,QAAQhC,MAAb,EAAqB,OAAOL,YAA5B,EAA0C,MAAMO;UAC9CjB,8BAACgD,YAAK,GAAGxC,IAAI,CAACyC,IAAL,CAAU,GAAV,GAAT;;QAED,OAAO5C,IAAP,KAAgB,WAAhB,IACCL,8BAACkD,oBACC,OAAO;QACLC,KAAK,EAAEnC,SADF;QAELF,KAAK,EAAEJ,YAFF;QAGL0C,SAAS,EAAE;;YAGZ/C;;;KAdX;CA9HF;;AAoJAF,IAAM0C,MAAM,GAAGQ,sBAAU,CAACC,MAAX,CAAkB;EAC/BR,YAAY,EAAE;IACZS,UAAU,EAAE,QADA;IAEZC,OAAO,EAAE;;CAHE,CAAf;;;;"}